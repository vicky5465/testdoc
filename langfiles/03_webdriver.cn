#:page_title
"selenium webdriver介绍"

#:previous_link
"02_selenium_ide"

#:previous_title
"Selenium-IDE"

#:next_link
"04_webdriver_advanced"

#:next_title
"WebDriver: Advanced Usage"

#:side
:list
<li><a class="reference internal" href="#">Selenium WebDriver</a><ul class="treeview">
<li><a class="reference internal" href="#introducing-webdriver">Introducing WebDriver</a></li>
<li><a class="reference internal" href="#how-does-webdriver-drive-the-browser-compared-to-selenium-rc">How Does WebDriver ‘Drive’ the Browser Compared to Selenium-RC?</a></li>
<li><a class="reference internal" href="#webdriver-and-the-selenium-server">WebDriver and the Selenium-Server</a></li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#setting-up-a-selenium-webdriver-project">Setting Up a Selenium-WebDriver Project</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#java">Java</a></li>
<li><a class="reference internal" href="#c">C#</a></li>
<li><a class="reference internal" href="#python">Python</a></li>
<li><a class="reference internal" href="#ruby">Ruby</a></li>
<li><a class="reference internal" href="#perl">Perl</a></li>
<li class="last"><a class="reference internal" href="#php">PHP</a></li>
</ul>
</li>
<li><a class="reference internal" href="#migrating-from-selenium-1-0">Migrating from Selenium 1.0</a></li>
<li><a class="reference internal" href="#introducing-the-selenium-webdriver-api-by-example">Introducing the Selenium-WebDriver API by Example</a></li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#selenium-webdriver-api-commands-and-operations">Selenium-WebDriver API Commands and Operations</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#fetching-a-page">Fetching a Page</a></li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#locating-ui-elements-webelements">Locating UI Elements (WebElements)</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#by-id">By ID</a></li>
<li><a class="reference internal" href="#by-class-name">By Class Name</a></li>
<li><a class="reference internal" href="#by-tag-name">By Tag Name</a></li>
<li><a class="reference internal" href="#by-name">By Name</a></li>
<li><a class="reference internal" href="#by-link-text">By Link Text</a></li>
<li><a class="reference internal" href="#by-partial-link-text">By Partial Link Text</a></li>
<li><a class="reference internal" href="#by-css">By CSS</a></li>
<li><a class="reference internal" href="#by-xpath">By XPATH</a></li>
<li class="last"><a class="reference internal" href="#using-javascript">Using JavaScript</a></li>
</ul>
</li>
<li><a class="reference internal" href="#user-input-filling-in-forms">User Input - Filling In Forms</a></li>
<li><a class="reference internal" href="#moving-between-windows-and-frames">Moving Between Windows and Frames</a></li>
<li><a class="reference internal" href="#popup-dialogs">Popup Dialogs</a></li>
<li><a class="reference internal" href="#navigation-history-and-location">Navigation: History and Location</a></li>
<li><a class="reference internal" href="#cookies">Cookies</a></li>
<li><a class="reference internal" href="#changing-the-user-agent">Changing the User Agent</a></li>
<li class="last"><a class="reference internal" href="#drag-and-drop">Drag And Drop</a></li>
</ul>
</li>
<li><a class="reference internal" href="#driver-specifics-and-tradeoffs">Driver Specifics and Tradeoffs</a></li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#selenium-webdriver-s-drivers">Selenium-WebDriver’s Drivers</a><ul class="treeview" style="display: none;">
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#usage">Usage</a></li>
<li><a class="reference internal" href="#pros">Pros</a></li>
<li><a class="reference internal" href="#cons">Cons</a></li>
<li><a class="reference internal" href="#javascript-in-the-htmlunit-driver">JavaScript in the HtmlUnit Driver</a></li>
<li class="last"><a class="reference internal" href="#enabling-javascript">Enabling JavaScript</a></li>
</ul>
</li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#firefox-driver">Firefox Driver</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#id1">Usage</a></li>
<li><a class="reference internal" href="#id2">Pros</a></li>
<li><a class="reference internal" href="#id3">Cons</a></li>
<li><a class="reference internal" href="#modifying-the-firefox-profile">Modifying the Firefox Profile</a></li>
<li class="last"><a class="reference internal" href="#info">Info</a></li>
</ul>
</li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#id4">Usage</a></li>
<li><a class="reference internal" href="#id5">Pros</a></li>
<li><a class="reference internal" href="#id6">Cons</a></li>
<li class="last"><a class="reference internal" href="#id7">Info</a></li>
</ul>
</li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#chrome-driver">Chrome Driver</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#id8">Usage</a></li>
<li><a class="reference internal" href="#id9">Pros</a></li>
<li><a class="reference internal" href="#id10">Cons</a></li>
<li><a class="reference internal" href="#id11">Info</a></li>
<li class="last"><a class="reference internal" href="#getting-running-with-chrome-driver">Getting running with Chrome Driver</a></li>
</ul>
</li>
<li><a class="reference internal" href="#opera-driver">Opera Driver</a></li>
<li><a class="reference internal" href="#iphone-driver">iPhone Driver</a></li>
<li class="last"><a class="reference internal" href="#android-driver">Android Driver</a></li>
</ul>
</li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#alternative-back-ends-mixing-webdriver-and-rc-technologies">Alternative Back-Ends: Mixing WebDriver and RC Technologies</a><ul class="treeview" style="display: none;">
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#webdriver-backed-selenium-rc">WebDriver-Backed Selenium-RC</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#id12">Pros</a></li>
<li class="last"><a class="reference internal" href="#id13">Cons</a></li>
</ul>
</li>
<li class="last"><a class="reference internal" href="#backing-webdriver-with-selenium">Backing WebDriver with Selenium</a></li>
</ul>
</li>
<li><a class="reference internal" href="#running-standalone-selenium-server-for-use-with-remotedrivers">Running Standalone Selenium Server for use with RemoteDrivers</a></li>
<li><a class="reference internal" href="#additional-resources">Additional Resources</a></li>
<li class="last"><a class="reference internal" href="#next-steps">Next Steps</a></li>

#:body
:body
<h1>Selenium WebDriver<a class="headerlink" href="#selenium-webdriver" title="Permalink to this headline">¶</a></h1>
<p id="chapter03-reference"><em>注意：我们目前还在编写这部分的文档。我们确信这部分文档是准确的，但请注意，这个章节的内容还有待更新。我们会提供更多的信息来充实这一章节。</em></p>
<div class="section" id="introducing-webdriver">
<h2>WebDriver介绍<a class="headerlink" href="#introducing-webdriver" title="Permalink to this headline">¶</a></h2>
<p>Selenium 2.0的首要功能是集合了WebDriver API. 除了结果Selenium-RC API的一些局限外，WebDriver旨在提供更简洁，更紧凑的开发界面。Selenium-WebDriver可以更好的支持动态页面，那样的话，页面元素不需要重载就可以进行更改。
WebDriver的目的就是提供一个设计良好的面向对象的API，以此来支持更先进，更高级的页面应用测试问题。</p>
</div>
<div class="section" id="how-does-webdriver-drive-the-browser-compared-to-selenium-rc">
<h2>相当于Selenium-RC，WebDriver是如何’驱动‘浏览器的?<a class="headerlink" href="#how-does-webdriver-drive-the-browser-compared-to-selenium-rc" title="Permalink to this headline">¶</a></h2>
<p>Selenium-WebDriver使用各个浏览器自身支持的自动化机制直接调用浏览器。这些直接调用是如何工作的，各个浏览器支持哪些功能，这些都将在本章中进行讲解。</p>
<p>对于那些已经熟悉Selenium-RC的人而言, Selenium-WebDriver与Selenium-RC是完全不同的。Selenium-RC对各个其所支持的浏览器使用相同的工作原理。浏览器加载完成后，Selenium-RC将
javascript方法“注入”到浏览器中，并使用javascript来驱动浏览器自身携带的AUT。WebDriver使用的不是这个技术。WebDriver直接调用浏览器所支持的自动化程序来驱动各个不同的浏览器。</p>
</div>
<div class="section" id="webdriver-and-the-selenium-server">
<h2>WebDriver和Selenium-Server<a class="headerlink" href="#webdriver-and-the-selenium-server" title="Permalink to this headline">¶</a></h2>
<p>你可能需要，也可能不需要使用到Selenium Server, 这完全取决于你打算如何使用Selenium-WebDriver。如果你只打算使用WebDriver API，那么你就不需要Selenium-Server。如果你的浏览器和测试
脚本要在同一台机器上跑，并且你的测试脚本只需要使用WebDriver API，那么你也不需要Selenium-Server; WebDriver会直接调用浏览器</p>
<p>但是，碰到以下这些情况，你会在使用Selenium-WebDriver的同时，还需要使用Selenium-Server：</p>
<blockquote>
<div><ul class="simple">
<li>当你正在使用Selenium-Grid将测试脚本分布到多台机器或者虚拟机器上时。</li>
<li>你想连接到远程机器上的某个特殊版本的浏览器时。</li>
<li>你使用的不是Java bindings(例如Python, C#, or Ruby)但又要使用 <a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a>时</li>
</ul>
</div></blockquote>
</div>
<div class="section" id="setting-up-a-selenium-webdriver-project">
<span id="setting-up-webdriver-project"></span><h2>搭建一个Selenium-WebDriver项目<a class="headerlink" href="#setting-up-a-selenium-webdriver-project" title="Permalink to this headline">¶</a></h2>
<p>为了安装Selenium，在开发时就需要搭建一个项目，在该项目中使用Selenium来编写程序。如何使用编程语言和开发环境来安装Selenium。</p>
<div class="section" id="java">
<h3>Java<a class="headerlink" href="#java" title="Permalink to this headline">¶</a></h3>
<p>建立一个Selenium 2.0 Java项目最简单的方法是使用Maven。Maven会把java bindings(Selenium 2.0 java客户库)和所有依赖项下载下来,然后Maven会按照pom.xml文件(项目配置)来给你建立项目。 
项目建立好之后, 你可以把maven项目导入到你喜欢的IDE中, 如：IntelliJ IDEA或者Eclipse。</p>
<p>首先,创建一个文件夹来放你的Selenium项目文件。然后，用Maven来创建一个pom.xml文件，你可以用文件编辑器来创建该配置文件。在此，我们就不介绍pom.xml文件的详细内容了，
也不介绍如何使用Maven了，因为市面上已经有很不错的参考文档了。你的pom.xml文件看起来是这个样子的。在你创建的项目文件夹中创建这个文件。</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
                 <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
                 <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>MySel20Proj<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>MySel20Proj<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;dependencies&gt;</span>
            <span class="nt">&lt;dependency&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.seleniumhq.selenium<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>selenium-java<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>2.32.0<span class="nt">&lt;/version&gt;</span>
            <span class="nt">&lt;/dependency&gt;</span>
            <span class="nt">&lt;dependency&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>com.opera<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>operadriver<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>
        <span class="nt">&lt;dependencyManagement&gt;</span>
            <span class="nt">&lt;dependencies&gt;</span>
                <span class="nt">&lt;dependency&gt;</span>
                    <span class="nt">&lt;groupId&gt;</span>com.opera<span class="nt">&lt;/groupId&gt;</span>
                    <span class="nt">&lt;artifactId&gt;</span>operadriver<span class="nt">&lt;/artifactId&gt;</span>
                    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
                    <span class="nt">&lt;exclusions&gt;</span>
                        <span class="nt">&lt;exclusion&gt;</span>
                            <span class="nt">&lt;groupId&gt;</span>org.seleniumhq.selenium<span class="nt">&lt;/groupId&gt;</span>
                            <span class="nt">&lt;artifactId&gt;</span>selenium-remote-driver<span class="nt">&lt;/artifactId&gt;</span>
                        <span class="nt">&lt;/exclusion&gt;</span>
                    <span class="nt">&lt;/exclusions&gt;</span>
                <span class="nt">&lt;/dependency&gt;</span>
            <span class="nt">&lt;/dependencies&gt;</span>
        <span class="nt">&lt;/dependencyManagement&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</pre></div>
</div>
<p>请确定你使用的是最新的版本号。在写这篇文章的时候，上面列出来的版本号都是最新的，但是在Selenium 2.0发布后，马上会频繁的发布新的版本。
请去<a class="reference external" href="http://seleniumhq.org/download/maven.html">Maven下载页面</a>检查最新的版本号，并修改上面相应的依赖项。</p>
<p>在命令行里输入: CD 项目目录 run maven</p>
<div class="highlight-bash"><div class="highlight"><pre>mvn clean install
</pre></div>
</div>
<p>这条命令会把Selenium及其所有的依赖项下载下来，并添加到项目中。</p>
<p>最后，把项目导入到你熟悉的开发环境。对开发环境不熟悉的人，我们在附录中提供了开发环境的信息。</p>
<p><a class="reference internal" href="appendix_installing_java_driver_Sel20_via_maven.jsp#importing-maven-into-intellij-reference"><em>在IntelliJ IDEA导入maven项目</em></a>.
<a class="reference internal" href="appendix_installing_java_driver_Sel20_via_maven.jsp#importing-maven-into-eclipse-reference"><em>在Eclipse里导入maven项目</em></a>.</p>
</div>
<div class="section" id="c">
<h3>C#<a class="headerlink" href="#c" title="Permalink to this headline">¶</a></h3>
<p>对于Selenium 2.2.0, C#绑定被分为一套有符号的dlls和其他依赖的dlls。早在Selenium 2.2.0之前, 所以Selenium的dll都是无符号的。为了在项目里添加Selenium,你只需要在这儿<a class="reference external" href="https://code.google.com/p/selenium/downloads/list">https://code.google.com/p/selenium/downloads/list</a>下载最新的
selenium-dotnet zip压缩文件。如果你使用的是Windows Vista或者更新的版本, 在解压前，你需要给zip文件解除锁定: 右击zip文件，点击“属性”，点击“解除锁定”，然后点击“OK"。</p>
<p>将zip文件的内容进行解压, 在Visual Studio (或者IDE)的项目里，给每个解压的dll添加一个附注。.</p>
<p>官方的NuGet包:
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.RC">RC</a>
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.WebDriver">WebDriver</a>
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.WebDriverBackedSelenium">WebDriverBackedSelenium</a>
<a class="reference external" href="http://www.nuget.org/List/Packages/Selenium.Support">Support</a></p>
</div>
<div class="section" id="python">
<h3>Python<a class="headerlink" href="#python" title="Permalink to this headline">¶</a></h3>
<p>If you are using Python for test automation then you probably are already familiar with developing
in Python.  To add Selenium to your Python environment run the following command from
a command-line.</p>
<div class="highlight-bash"><div class="highlight"><pre>pip install selenium
</pre></div>
</div>
<p>Pip requires <a class="reference external" href="http://pypi.python.org/pypi/pip">pip</a> to be installed, pip also has a dependency
on <a class="reference external" href="http://pypi.python.org/pypi/setuptools">setuptools</a>.</p>
<p>Teaching Python development itself is beyond the scope of this document, however there are many
resources on Python and likely developers in your organization can help you get up to speed.</p>
</div>
<div class="section" id="ruby">
<h3>Ruby<a class="headerlink" href="#ruby" title="Permalink to this headline">¶</a></h3>
<p>If you are using Ruby for test automation then you probably are already familiar with developing
in Ruby.  To add Selenium to your Ruby environment run the following command from
a command-line.</p>
<div class="highlight-bash"><div class="highlight"><pre>gem install selenium-webdriver
</pre></div>
</div>
<p>Teaching Ruby development itself is beyond the scope of this document, however there are many
resources on Ruby and likely developers in your organization can help you get up to speed.</p>
</div>
<div class="section" id="perl">
<h3>Perl<a class="headerlink" href="#perl" title="Permalink to this headline">¶</a></h3>
<p>Perl bindings are provided by a third party, please refer to any of their documentation on how to
install / get started. There is one known <a class="reference external" href="https://metacpan.org/module/Selenium::Remote::Driver">Perl binding</a> as of this writing.</p>
</div>
<div class="section" id="php">
<h3>PHP<a class="headerlink" href="#php" title="Permalink to this headline">¶</a></h3>
<p>PHP bindings are provided by a third party, please refer to any of their documentation on how to
install / get started. There are three known bindings at this time: <a class="reference external" href="https://github.com/chibimagic/WebDriver-PHP/">By Chibimagic</a>
<a class="reference external" href="http://code.google.com/p/php-webdriver-bindings/">By Lukasz Kolczynski</a> and <a class="reference external" href="https://github.com/facebook/php-webdriver">By the Facebook</a></p>
</div>
</div>
<div class="section" id="migrating-from-selenium-1-0">
<h2>Migrating from Selenium 1.0<a class="headerlink" href="#migrating-from-selenium-1-0" title="Permalink to this headline">¶</a></h2>
<p>For those who already have test suites written using Selenium 1.0, we have provided tips on how to
migrate your existing code to Selenium 2.0.  Simon Stewart, the lead developer for Selenium 2.0,
has written an article on migrating from Selenium 1.0.  We’ve included this as an appendix.</p>
<p><a class="reference internal" href="appendix_migrating_from_rc_to_webdriver.jsp#migrating-to-webdriver-reference"><em>Migrating From Selenium RC to Selenium WebDriver</em></a></p>
</div>
<div class="section" id="introducing-the-selenium-webdriver-api-by-example">
<h2>Introducing the Selenium-WebDriver API by Example<a class="headerlink" href="#introducing-the-selenium-webdriver-api-by-example" title="Permalink to this headline">¶</a></h2>
<p>WebDriver is a tool for automating web application testing, and in particular
to verify that they work as expected. It aims to provide a friendly API that’s
easy to explore and understand, easier to use than the Selenium-RC (1.0) API,
which will help to make your tests easier to
read and maintain. It’s not tied to any particular test framework, so it can
be used equally well in a unit testing or from a plain old “main” method.
This section introduces WebDriver’s API and helps get you started becoming
familiar with it.  Start by setting up a WebDriver project if you haven’t already.
This was described in the previous section, <a class="reference internal" href="#setting-up-webdriver-project"><em>Setting Up a Selenium-WebDriver Project</em></a>.</p>
<p>Once your project is set up, you can see that WebDriver acts just as any normal library:
it is entirely self-contained, and you usually don’t need to remember to start any
additional processes or run any installers before using it, as opposed to the proxy server
with Selenium-RC.</p>
<p>Note: additional steps are required to use <a class="reference internal" href="#chrome-driver">Chrome Driver</a>, <a class="reference internal" href="#opera-driver">Opera Driver</a>, <a class="reference internal" href="#android-driver">Android Driver</a>
and <a class="reference internal" href="#iphone-driver">iPhone Driver</a></p>
<p>You’re now ready to write some code. An easy way to get started is this
example, which searches for the term “Cheese” on Google and then outputs the
result page’s title to the console.</p>
<div class="highlight-java"><div class="highlight"><pre><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">openqa</span><span class="o">.</span><span class="na">selenium</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.openqa.selenium.By</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.WebElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.ui.ExpectedCondition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.openqa.selenium.support.ui.WebDriverWait</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Selenium2Example</span>  <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create a new instance of the Firefox driver</span>
        <span class="c1">// Notice that the remainder of the code relies on the interface, </span>
        <span class="c1">// not the implementation.</span>
        <span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>

        <span class="c1">// And now use this to visit Google</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"http://www.google.com"</span><span class="o">);</span>
        <span class="c1">// Alternatively the same thing can be done like this</span>
        <span class="c1">// driver.navigate().to("http://www.google.com");</span>

        <span class="c1">// Find the text input element by its name</span>
        <span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"q"</span><span class="o">));</span>

        <span class="c1">// Enter something to search for</span>
        <span class="n">element</span><span class="o">.</span><span class="na">sendKeys</span><span class="o">(</span><span class="s">"Cheese!"</span><span class="o">);</span>

        <span class="c1">// Now submit the form. WebDriver will find the form for us from the element</span>
        <span class="n">element</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>

        <span class="c1">// Check the title of the page</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Page title is: "</span> <span class="o">+</span> <span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
        
        <span class="c1">// Google's search is rendered dynamically with JavaScript.</span>
        <span class="c1">// Wait for the page to load, timeout after 10 seconds</span>
        <span class="o">(</span><span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">10</span><span class="o">)).</span><span class="na">until</span><span class="o">(</span><span class="k">new</span> <span class="n">ExpectedCondition</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">d</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"cheese!"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>

        <span class="c1">// Should see: "cheese! - Google Search"</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Page title is: "</span> <span class="o">+</span> <span class="n">driver</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
        
        <span class="c1">//Close the browser</span>
        <span class="n">driver</span><span class="o">.</span><span class="na">quit</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="k">using</span> <span class="nn">OpenQA.Selenium</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">OpenQA.Selenium.Firefox</span><span class="p">;</span>

<span class="c1">// Requires reference to WebDriver.Support.dll</span>
<span class="k">using</span> <span class="nn">OpenQA.Selenium.Support.UI</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">GoogleSuggest</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Create a new instance of the Firefox driver.</span>

        <span class="c1">// Notice that the remainder of the code relies on the interface, </span>
        <span class="c1">// not the implementation.</span>

        <span class="c1">// Further note that other drivers (InternetExplorerDriver,</span>
        <span class="c1">// ChromeDriver, etc.) will require further configuration </span>
        <span class="c1">// before this example will work. See the wiki pages for the</span>
        <span class="c1">// individual drivers at http://code.google.com/p/selenium/wiki</span>
        <span class="c1">// for further information.</span>
        <span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="p">();</span>

        <span class="c1">//Notice navigation is slightly different than the Java version</span>
        <span class="c1">//This is because 'get' is a keyword in C#</span>
        <span class="n">driver</span><span class="p">.</span><span class="n">Navigate</span><span class="p">().</span><span class="n">GoToUrl</span><span class="p">(</span><span class="s">"http://www.google.com/"</span><span class="p">);</span>

        <span class="c1">// Find the text input element by its name</span>
        <span class="n">IWebElement</span> <span class="n">query</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">"q"</span><span class="p">));</span>

        <span class="c1">// Enter something to search for</span>
        <span class="n">query</span><span class="p">.</span><span class="n">SendKeys</span><span class="p">(</span><span class="s">"Cheese"</span><span class="p">);</span>

        <span class="c1">// Now submit the form. WebDriver will find the form for us from the element</span>
        <span class="n">query</span><span class="p">.</span><span class="n">Submit</span><span class="p">();</span>

        <span class="c1">// Google's search is rendered dynamically with JavaScript.</span>
        <span class="c1">// Wait for the page to load, timeout after 10 seconds</span>
        <span class="n">WebDriverWait</span> <span class="n">wait</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">10</span><span class="p">));</span>
        <span class="n">wait</span><span class="p">.</span><span class="n">Until</span><span class="p">((</span><span class="n">d</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">d</span><span class="p">.</span><span class="n">Title</span><span class="p">.</span><span class="n">ToLower</span><span class="p">().</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">);</span> <span class="p">});</span>

        <span class="c1">// Should see: "Cheese - Google Search"</span>
        <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">"Page title is: "</span> <span class="p">+</span> <span class="n">driver</span><span class="p">.</span><span class="n">Title</span><span class="p">);</span>

        <span class="c1">//Close the browser</span>
        <span class="n">driver</span><span class="p">.</span><span class="n">Quit</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">from</span> <span class="nn">selenium.common.exceptions</span> <span class="kn">import</span> <span class="n">TimeoutException</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.support.ui</span> <span class="kn">import</span> <span class="n">WebDriverWait</span> <span class="c"># available since 2.4.0</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.support</span> <span class="kn">import</span> <span class="n">expected_conditions</span> <span class="k">as</span> <span class="n">EC</span> <span class="c"># available since 2.26.0</span>

<span class="c"># Create a new instance of the Firefox driver</span>
<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Firefox</span><span class="p">()</span>

<span class="c"># go to the google home page</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://www.google.com"</span><span class="p">)</span>

<span class="c"># find the element that's name attribute is q (the google search box)</span>
<span class="n">inputElement</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">"q"</span><span class="p">)</span>

<span class="c"># type in the search</span>
<span class="n">inputElement</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">"Cheese!"</span><span class="p">)</span>

<span class="c"># submit the form (although google automatically searches now without submitting)</span>
<span class="n">inputElement</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span>

<span class="c"># the page is ajaxy so the title is originally this:</span>
<span class="k">print</span> <span class="n">driver</span><span class="o">.</span><span class="n">title</span>

<span class="k">try</span><span class="p">:</span>
    <span class="c"># we have to wait for the page to refresh, the last thing that seems to be updated is the title</span>
    <span class="n">WebDriverWait</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">until</span><span class="p">(</span><span class="n">EC</span><span class="o">.</span><span class="n">title_contains</span><span class="p">(</span><span class="s">"cheese!"</span><span class="p">))</span>

    <span class="c"># You should see "cheese! - Google Search"</span>
    <span class="k">print</span> <span class="n">driver</span><span class="o">.</span><span class="n">title</span>

<span class="k">finally</span><span class="p">:</span>
    <span class="n">driver</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'rubygems'</span>
<span class="nb">require</span> <span class="s1">'selenium-webdriver'</span>

<span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span> <span class="s2">"http://google.com"</span>

<span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">"q"</span>
<span class="n">element</span><span class="o">.</span><span class="n">send_keys</span> <span class="s2">"Cheese!"</span>
<span class="n">element</span><span class="o">.</span><span class="n">submit</span>

<span class="nb">puts</span> <span class="s2">"Page title is </span><span class="si">#{</span><span class="n">driver</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">"</span>

<span class="n">wait</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="no">Wait</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">)</span>
<span class="n">wait</span><span class="o">.</span><span class="n">until</span> <span class="p">{</span> <span class="n">driver</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">start_with?</span> <span class="s2">"cheese!"</span> <span class="p">}</span>

<span class="nb">puts</span> <span class="s2">"Page title is </span><span class="si">#{</span><span class="n">driver</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">"</span>
<span class="n">driver</span><span class="o">.</span><span class="n">quit</span>
</pre></div>
</div>
<div class="highlight-javascript" style="display: none;"><div class="highlight"><pre><span class="kd">var</span> <span class="nx">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">webdriver</span><span class="p">.</span><span class="nx">Builder</span><span class="p">().</span><span class="nx">build</span><span class="p">();</span>
<span class="nx">driver</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://www.google.com'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">findElement</span><span class="p">(</span><span class="nx">webdriver</span><span class="p">.</span><span class="nx">By</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="s1">'q'</span><span class="p">));</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">'Cheese!'</span><span class="p">);</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">submit</span><span class="p">();</span>

<span class="nx">driver</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Page title is: '</span> <span class="o">+</span> <span class="nx">title</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">driver</span><span class="p">.</span><span class="nx">wait</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">driver</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">title</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">'cheese!'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>

<span class="nx">driver</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Page title is: '</span> <span class="o">+</span> <span class="nx">title</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">driver</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
</pre></div>
</div>
<p>In upcoming sections, you will learn more about how to use WebDriver for things
such as navigating forward and backward in your browser’s history, and how to
test web sites that use frames and windows. We also provide a more
thorough discussions and examples.</p>
</div>
<div class="section" id="selenium-webdriver-api-commands-and-operations">
<h2>Selenium-WebDriver API Commands and Operations<a class="headerlink" href="#selenium-webdriver-api-commands-and-operations" title="Permalink to this headline">¶</a></h2>
<div class="section" id="fetching-a-page">
<h3>Fetching a Page<a class="headerlink" href="#fetching-a-page" title="Permalink to this headline">¶</a></h3>
<p>The first thing you’re likely to want to do with WebDriver is navigate to a page.
The normal way to do this is by calling “get”:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"http://www.google.com"</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="p">.</span><span class="n">Url</span> <span class="p">=</span> <span class="s">"http://www.google.com"</span><span class="p">;</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">get</span> <span class="s2">"http://www.google.com"</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://www.google.com"</span><span class="p">)</span>
</pre></div>
</div>
<p>Dependent on several factors, including the OS/Browser combination,
WebDriver may or may not wait for the page to load. In some circumstances,
WebDriver may return control before the page has finished, or even started, loading.
To ensure robustness, you need to wait for the element(s) to exist in the page using
<a class="reference internal" href="04_webdriver_advanced.jsp#explicit-and-implicit-waits-reference"><em>Explicit and Implicit Waits</em></a>.</p>
</div>
<div class="section" id="locating-ui-elements-webelements">
<h3>Locating UI Elements (WebElements)<a class="headerlink" href="#locating-ui-elements-webelements" title="Permalink to this headline">¶</a></h3>
<p>Locating elements in WebDriver can be done on the WebDriver instance itself or on a WebElement.
Each of the language bindings expose a “Find Element” and “Find Elements” method. The first returns
a WebElement object otherwise it throws an exception. The latter returns a list of WebElements, it can
return an empty list if no DOM elements match the query.</p>
<p>The “Find” methods take a locator or query object called “By”. “By” strategies are listed below.</p>
<div class="section" id="by-id">
<h4>By ID<a class="headerlink" href="#by-id" title="Permalink to this headline">¶</a></h4>
<p>This is the most efficient and preferred way to locate an element. Common pitfalls that UI developers
make is having non-unique id’s on a page or auto-generating the id, both should be avoided. A class
on an html element is more appropriate than an auto-generated id.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"coolestWidgetEvah"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">"coolestWidgetEvah"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">element</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">Id</span><span class="p">(</span><span class="s">"coolestWidgetEvah"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s2">"coolestWidgetEvah"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">"coolestWidgetEvah"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="n">By</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="s">"coolestWidgetEvah"</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="by-class-name">
<h4>By Class Name<a class="headerlink" href="#by-class-name" title="Permalink to this headline">¶</a></h4>
<p>“Class” in this case refers to the attribute on the DOM element. Often in practical use there are
many DOM elements with the same class name, thus finding multiple elements becomes the more practical
option over finding the first element.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"cheese"</span><span class="nt">&gt;&lt;span&gt;</span>Cheddar<span class="nt">&lt;/span&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"cheese"</span><span class="nt">&gt;&lt;span&gt;</span>Gouda<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">className</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">cheeses</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">ClassName</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:class_name</span><span class="p">,</span> <span class="s2">"cheese"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:class</span><span class="p">,</span> <span class="s2">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements_by_class_name</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">cheeses</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="n">By</span><span class="o">.</span><span class="n">CLASS_NAME</span><span class="p">,</span> <span class="s">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="by-tag-name">
<h4>By Tag Name<a class="headerlink" href="#by-tag-name" title="Permalink to this headline">¶</a></h4>
<p>The DOM Tag Name of the element.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"..."</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">"iframe"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">frame</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">"iframe"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">"iframe"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_tag_name</span><span class="p">(</span><span class="s">"iframe"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">frame</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="n">By</span><span class="o">.</span><span class="n">TAG_NAME</span><span class="p">,</span> <span class="s">"iframe"</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="by-name">
<h4>By Name<a class="headerlink" href="#by-name" title="Permalink to this headline">¶</a></h4>
<p>Find the input element with matching name attribute.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"cheese"</span> <span class="na">type=</span><span class="s">"text"</span><span class="nt">/&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">Name</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="s2">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="n">By</span><span class="o">.</span><span class="n">NAME</span><span class="p">,</span> <span class="s">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="by-link-text">
<h4>By Link Text<a class="headerlink" href="#by-link-text" title="Permalink to this headline">¶</a></h4>
<p>Find the link element with matching visible text.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.google.com/search?q=cheese"</span><span class="nt">&gt;</span>cheese<span class="nt">&lt;/a&gt;</span>&gt;
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">linkText</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">LinkText</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:link_text</span><span class="p">,</span> <span class="s2">"cheese"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:link</span><span class="p">,</span> <span class="s2">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_link_text</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="n">By</span><span class="o">.</span><span class="n">LINK_TEXT</span><span class="p">,</span> <span class="s">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="by-partial-link-text">
<h4>By Partial Link Text<a class="headerlink" href="#by-partial-link-text" title="Permalink to this headline">¶</a></h4>
<p>Find the link element with partial matching visible text.</p>
<p>Example of how to find an element that looks like this:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://www.google.com/search?q=cheese"</span><span class="nt">&gt;</span>search for cheese<span class="nt">&lt;/a&gt;</span>&gt;
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">partialLinkText</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">PartialLinkText</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:partial_link_text</span><span class="p">,</span> <span class="s2">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_partial_link_text</span><span class="p">(</span><span class="s">"cheese"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="n">By</span><span class="o">.</span><span class="n">PARTIAL_LINK_TEXT</span><span class="p">,</span> <span class="s">"cheese"</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="by-css">
<h4>By CSS<a class="headerlink" href="#by-css" title="Permalink to this headline">¶</a></h4>
<p>Like the name implies it is a locator strategy by css. Native browser support
is used by default, so please refer to <cite>w3c css selectors &lt;http://www.w3.org/TR/CSS/#selectors&gt;</cite>
for a list of generally available css selectors. If a browser does not have
native support for css queries, then <a class="reference external" href="http://sizzlejs.com/">Sizzle</a> is used. IE 6,7 and FF3.0
currently use Sizzle as the css query engine.</p>
<p>Beware that not all browsers were created equal, some css that might work in one version may not work
in another.</p>
<p>Example of to find the cheese below:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"food"</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">"dairy"</span><span class="nt">&gt;</span>milk<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"dairy aged"</span><span class="nt">&gt;</span>cheese<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">cssSelector</span><span class="o">(</span><span class="s">"#food span.dairy.aged"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">cheese</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CssSelector</span><span class="p">(</span><span class="s">"#food span.dairy.aged"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:css</span><span class="p">,</span> <span class="s2">"#food span.dairy.aged"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_css_selector</span><span class="p">(</span><span class="s">"#food span.dairy.aged"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">cheese</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="n">By</span><span class="o">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="s">"#food span.dairy.aged"</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="by-xpath">
<h4>By XPATH<a class="headerlink" href="#by-xpath" title="Permalink to this headline">¶</a></h4>
<p>At a high level, WebDriver uses a browser’s native XPath capabilities wherever
possible. On those browsers that don’t have native XPath support, we have
provided our own implementation. This can lead to some unexpected behaviour
unless you are aware of the differences in the various xpath engines.</p>
<table border="1" class="docutils">
<colgroup>
<col width="28%">
<col width="24%">
<col width="27%">
<col width="21%">
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Driver</th>
<th class="head">Tag and Attribute Name</th>
<th class="head">Attribute Values</th>
<th class="head">Native XPath Support</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></td>
<td>Lower-cased</td>
<td>As they appear in the HTML</td>
<td>Yes</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a></td>
<td>Lower-cased</td>
<td>As they appear in the HTML</td>
<td>No</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#firefox-driver">Firefox Driver</a></td>
<td>Case insensitive</td>
<td>As they appear in the HTML</td>
<td>Yes</td>
</tr>
</tbody>
</table>
<p>This is a little abstract, so for the following piece of HTML:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"example"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;INPUT</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"other"</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<div class="highlight-java"><div class="highlight"><pre><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">xpath</span><span class="o">(</span><span class="s">"//input"</span><span class="o">));</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">inputs</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">XPath</span><span class="p">(</span><span class="s">"//input"</span><span class="p">));</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">"//input"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements_by_xpath</span><span class="p">(</span><span class="s">"//input"</span><span class="p">)</span>

<span class="ow">or</span>

<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="n">By</span><span class="o">.</span><span class="n">XPATH</span><span class="p">,</span> <span class="s">"//input"</span><span class="p">)</span>
</pre></div>
</div>
<p>The following number of matches will be found</p>
<table border="1" class="docutils">
<colgroup>
<col width="21%">
<col width="24%">
<col width="24%">
<col width="32%">
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">XPath expression</th>
<th class="head"><a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></th>
<th class="head"><a class="reference internal" href="#firefox-driver">Firefox Driver</a></th>
<th class="head"><a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a></th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>//input</td>
<td>1 (“example”)</td>
<td>2</td>
<td>2</td>
</tr>
<tr class="row-odd"><td>//INPUT</td>
<td>0</td>
<td>2</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Sometimes HTML elements do not need attributes to be explicitly declared
because they will default to known values. For example, the “input” tag does
not require the “type” attribute because it defaults to “text”. The rule of
thumb when using xpath in WebDriver is that you <strong>should not</strong> expect to be able
to match against these implicit attributes.</p>
</div>
<div class="section" id="using-javascript">
<h4>Using JavaScript<a class="headerlink" href="#using-javascript" title="Permalink to this headline">¶</a></h4>
<p>You can execute arbitrary javascript to find an element and as long as you return a DOM Element,
it will be automatically converted to a WebElement object.</p>
<p>Simple example on a page that has jQuery loaded:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="o">(</span><span class="n">WebElement</span><span class="o">)</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">"return $('.cheese')[0]"</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="n">element</span> <span class="p">=</span> <span class="p">(</span><span class="n">IWebElement</span><span class="p">)</span> <span class="p">((</span><span class="n">IJavaScriptExecutor</span><span class="p">)</span><span class="n">driver</span><span class="p">).</span><span class="n">ExecuteScript</span><span class="p">(</span><span class="s">"return $('.cheese')[0]"</span><span class="p">);</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s2">"return $('.cheese')[0]"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s">"return $('.cheese')[0]"</span><span class="p">)</span>
</pre></div>
</div>
<p>Finding all the input elements to the every label on a page:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">"label"</span><span class="o">));</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">inputs</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;)</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span><span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span>
    <span class="s">"var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){"</span> <span class="o">+</span>
    <span class="s">"inputs.push(document.getElementById(labels[i].getAttribute('for'))); } return inputs;"</span><span class="o">,</span> <span class="n">labels</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">labels</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">"label"</span><span class="p">));</span>
<span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">inputs</span> <span class="p">=</span> <span class="p">(</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;)</span> <span class="p">((</span><span class="n">IJavaScriptExecutor</span><span class="p">)</span><span class="n">driver</span><span class="p">).</span><span class="n">ExecuteScript</span><span class="p">(</span>
    <span class="s">"var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){"</span> <span class="p">+</span>
    <span class="s">"inputs.push(document.getElementById(labels[i].getAttribute('for'))); } return inputs;"</span><span class="p">,</span> <span class="n">labels</span><span class="p">);</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">labels</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">"label"</span><span class="p">)</span>
<span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span>
    <span class="s2">"var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){"</span> <span class="o">+</span>
    <span class="s2">"inputs.push(document.getElementById(labels[i].getAttribute('for'))); } return inputs;"</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">labels</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_elements_by_tag_name</span><span class="p">(</span><span class="s">"label"</span><span class="p">)</span>
<span class="n">inputs</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span>
    <span class="s">"var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++){"</span> <span class="o">+</span>
    <span class="s">"inputs.push(document.getElementById(labels[i].getAttribute('for'))); } return inputs;"</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="user-input-filling-in-forms">
<h3>User Input - Filling In Forms<a class="headerlink" href="#user-input-filling-in-forms" title="Permalink to this headline">¶</a></h3>
<p>We’ve already seen how to enter text into a textarea or text field, but what
about the other elements? You can “toggle” the state of checkboxes, and you
can use “click” to set something like an OPTION tag selected. Dealing
with SELECT tags isn’t too bad:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">select</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">"select"</span><span class="o">));</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">allOptions</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">"option"</span><span class="o">));</span>
<span class="k">for</span> <span class="o">(</span><span class="n">WebElement</span> <span class="n">option</span> <span class="o">:</span> <span class="n">allOptions</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Value is: %s"</span><span class="o">,</span> <span class="n">option</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"value"</span><span class="o">)));</span>
    <span class="n">option</span><span class="o">.</span><span class="na">click</span><span class="o">();</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebElement</span> <span class="k">select</span> <span class="p">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">"select"</span><span class="p">));</span>
<span class="n">IList</span><span class="p">&lt;</span><span class="n">IWebElement</span><span class="p">&gt;</span> <span class="n">allOptions</span> <span class="p">=</span> <span class="k">select</span><span class="p">.</span><span class="n">FindElements</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">"option"</span><span class="p">));</span>
<span class="k">foreach</span> <span class="p">(</span><span class="n">IWebElement</span> <span class="n">option</span> <span class="k">in</span> <span class="n">allOptions</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">"Value is: "</span> <span class="p">+</span> <span class="n">option</span><span class="p">.</span><span class="n">GetAttribute</span><span class="p">(</span><span class="s">"value"</span><span class="p">));</span>
    <span class="n">option</span><span class="p">.</span><span class="n">Click</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="nb">select</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">"select"</span><span class="p">)</span>
<span class="n">all_options</span> <span class="o">=</span> <span class="nb">select</span><span class="o">.</span><span class="n">find_elements</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">"option"</span><span class="p">)</span>
<span class="n">all_options</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">option</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"Value is: "</span> <span class="o">+</span> <span class="n">option</span><span class="o">.</span><span class="n">attribute</span><span class="p">(</span><span class="s2">"value"</span><span class="p">)</span>
  <span class="n">option</span><span class="o">.</span><span class="n">click</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">select</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_tag_name</span><span class="p">(</span><span class="s">"select"</span><span class="p">)</span>
<span class="n">allOptions</span> <span class="o">=</span> <span class="n">select</span><span class="o">.</span><span class="n">find_elements_by_tag_name</span><span class="p">(</span><span class="s">"option"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="n">allOptions</span><span class="p">:</span>
    <span class="k">print</span> <span class="s">"Value is: "</span> <span class="o">+</span> <span class="n">option</span><span class="o">.</span><span class="n">get_attribute</span><span class="p">(</span><span class="s">"value"</span><span class="p">)</span>
    <span class="n">option</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</pre></div>
</div>
<p>This will find the first “SELECT” element on the page, and cycle through each
of its OPTIONs in turn, printing out their values, and selecting each in turn.
As you will notice, this isn’t the most efficient way of dealing with SELECT
elements. WebDriver’s support classes include one called “Select”, which
provides useful methods for interacting with these.</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Select</span> <span class="n">select</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Select</span><span class="o">(</span><span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">tagName</span><span class="o">(</span><span class="s">"select"</span><span class="o">)));</span>
<span class="n">select</span><span class="o">.</span><span class="na">deselectAll</span><span class="o">();</span>
<span class="n">select</span><span class="o">.</span><span class="na">selectByVisibleText</span><span class="o">(</span><span class="s">"Edam"</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">SelectElement</span> <span class="k">select</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SelectElement</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">FindElement</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">TagName</span><span class="p">(</span><span class="s">"select"</span><span class="p">)));</span>
<span class="k">select</span><span class="p">.</span><span class="n">DeselectAll</span><span class="p">();</span>
<span class="k">select</span><span class="p">.</span><span class="n">SelectByText</span><span class="p">(</span><span class="s">"Edam"</span><span class="p">);</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="c1"># available since 2.14</span>
    <span class="nb">select</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Support</span><span class="p">:</span><span class="ss">:Select</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:tag_name</span><span class="p">,</span> <span class="s2">"select"</span><span class="p">))</span>
    <span class="nb">select</span><span class="o">.</span><span class="n">deselect_all</span><span class="p">()</span>
    <span class="nb">select</span><span class="o">.</span><span class="n">select_by</span><span class="p">(</span><span class="ss">:text</span><span class="p">,</span> <span class="s2">"Edam"</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="c"># available since 2.12</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.support.ui</span> <span class="kn">import</span> <span class="n">Select</span>
<span class="n">select</span> <span class="o">=</span> <span class="n">Select</span><span class="p">(</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_tag_name</span><span class="p">(</span><span class="s">"select"</span><span class="p">))</span>
<span class="n">select</span><span class="o">.</span><span class="n">deselect_all</span><span class="p">()</span>
<span class="n">select</span><span class="o">.</span><span class="n">select_by_visible_text</span><span class="p">(</span><span class="s">"Edam"</span><span class="p">)</span>
</pre></div>
</div>
<p>This will deselect all OPTIONs from the first SELECT on the page, and then
select the OPTION with the displayed text of “Edam”.</p>
<p>Once you’ve finished filling out the form, you probably want to submit it. One
way to do this would be to find the “submit” button and click it:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">"submit"</span><span class="o">)).</span><span class="na">click</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="s2">"submit"</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">"submit"</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</pre></div>
</div>
<p>Alternatively, WebDriver has the convenience method “submit” on every element.
If you call this on an element within a form, WebDriver will walk up the DOM
until it finds the enclosing form and then calls submit on that. If the
element isn’t in a form, then the <tt class="docutils literal"><span class="pre">NoSuchElementException</span></tt> will be thrown:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">element</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">element</span><span class="o">.</span><span class="n">submit</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">element</span><span class="o">.</span><span class="n">submit</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="section" id="moving-between-windows-and-frames">
<h3>Moving Between Windows and Frames<a class="headerlink" href="#moving-between-windows-and-frames" title="Permalink to this headline">¶</a></h3>
<p>Some web applications have many frames or multiple windows. WebDriver supports
moving between named windows using the “switchTo” method:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">window</span><span class="o">(</span><span class="s">"windowName"</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">switch_to_window</span><span class="p">(</span><span class="s">"windowName"</span><span class="p">)</span>
</pre></div>
</div>
<p>All calls to <tt class="docutils literal"><span class="pre">driver</span></tt> will now be interpreted as being directed to the
particular window. But how do you know the window’s name? Take a look at the
javascript or link that opened it:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"somewhere.html"</span> <span class="na">target=</span><span class="s">"windowName"</span><span class="nt">&gt;</span>Click here to open a new window<span class="nt">&lt;/a&gt;</span>
</pre></div>
</div>
<p>Alternatively, you can pass a “window handle” to the “switchTo().window()”
method. Knowing this, it’s possible to iterate over every open window like so:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">handle</span> <span class="o">:</span> <span class="n">driver</span><span class="o">.</span><span class="na">getWindowHandles</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">window</span><span class="o">(</span><span class="n">handle</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">window_handles</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">handle</span><span class="o">|</span>
    <span class="n">driver</span><span class="o">.</span><span class="n">switch_to</span><span class="o">.</span><span class="n">window</span> <span class="n">handle</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="k">for</span> <span class="n">handle</span> <span class="ow">in</span> <span class="n">driver</span><span class="o">.</span><span class="n">window_handles</span><span class="p">:</span>
    <span class="n">driver</span><span class="o">.</span><span class="n">switch_to_window</span><span class="p">(</span><span class="n">handle</span><span class="p">)</span>
</pre></div>
</div>
<p>You can also switch from frame to frame (or into iframes):</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">frame</span><span class="o">(</span><span class="s">"frameName"</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">switch_to_frame</span><span class="p">(</span><span class="s">"frameName"</span><span class="p">)</span>
</pre></div>
</div>
<p>It’s possible to access subframes by separating the path with a dot, and you
can specify the frame by its index too. That is:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">frame</span><span class="o">(</span><span class="s">"frameName.0.child"</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">switch_to_frame</span><span class="p">(</span><span class="s">"frameName.0.child"</span><span class="p">)</span>
</pre></div>
</div>
<p>would go to the frame named “child” of the first subframe of the frame called
“frameName”. <strong>All frames are evaluated as if from *top*.</strong></p>
</div>
<div class="section" id="popup-dialogs">
<h3>Popup Dialogs<a class="headerlink" href="#popup-dialogs" title="Permalink to this headline">¶</a></h3>
<p>Starting with Selenium 2.0 beta 1, there is built in support for handling popup
dialog boxes. After you’ve triggered an action that opens a
popup, you can access the alert with the following:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Alert</span> <span class="n">alert</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">switchTo</span><span class="o">().</span><span class="na">alert</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">alert</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">switch_to</span><span class="o">.</span><span class="n">alert</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">alert</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">switch_to_alert</span><span class="p">()</span>
<span class="c"># usage: alert.dismiss(), etc.</span>
</pre></div>
</div>
<p>This will return the currently open alert object. With this object you can now accept,
dismiss, read its contents or even type into a prompt. This interface works equally
well on alerts, confirms, and prompts. Refer to the <a class="reference external" href="http://selenium.googlecode.com/git/docs/api/java/index.html">JavaDocs</a>
or <a class="reference external" href="http://selenium.googlecode.com/git/docs/api/rb/Selenium/WebDriver/Alert.html">RubyDocs</a> for more information.</p>
</div>
<div class="section" id="navigation-history-and-location">
<h3>Navigation: History and Location<a class="headerlink" href="#navigation-history-and-location" title="Permalink to this headline">¶</a></h3>
<p>Earlier, we covered navigating to a page using the “get” command (
<tt class="docutils literal"><span class="pre">driver.get("http://www.example.com")</span></tt>) As you’ve seen, WebDriver has a
number of smaller, task-focused interfaces, and navigation is a useful task.
Because loading a page is such a fundamental requirement, the method to do this
lives on the main WebDriver interface, but it’s simply a synonym to:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">navigate</span><span class="o">().</span><span class="na">to</span><span class="o">(</span><span class="s">"http://www.example.com"</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">to</span> <span class="s2">"http://www.example.com"</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://www.example.com"</span><span class="p">)</span>  <span class="c"># python doesn't have driver.navigate</span>
</pre></div>
</div>
<p>To reiterate: “<tt class="docutils literal"><span class="pre">navigate().to()</span></tt>” and “<tt class="docutils literal"><span class="pre">get()</span></tt>” do exactly the same thing.
One’s just a lot easier to type than the other!</p>
<p>The “navigate” interface also exposes the ability to move backwards and forwards in your browser’s history:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">navigate</span><span class="o">().</span><span class="na">forward</span><span class="o">();</span>
<span class="n">driver</span><span class="o">.</span><span class="na">navigate</span><span class="o">().</span><span class="na">back</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">forward</span>
<span class="n">driver</span><span class="o">.</span><span class="n">navigate</span><span class="o">.</span><span class="n">back</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="n">forward</span><span class="p">()</span>
<span class="n">driver</span><span class="o">.</span><span class="n">back</span><span class="p">()</span>
</pre></div>
</div>
<p>Please be aware that this functionality depends entirely on the underlying
browser. It’s just possible that something unexpected may happen when you call
these methods if you’re used to the behaviour of one browser over another.</p>
</div>
<div class="section" id="cookies">
<h3>Cookies<a class="headerlink" href="#cookies" title="Permalink to this headline">¶</a></h3>
<p>Before we leave these next steps, you may be interested in understanding how to
use cookies. First of all, you need to be on the domain that the cookie will be
valid for. If you are trying to preset cookies before
you start interacting with a site and your homepage is large / takes a while to load
an alternative is to find a smaller page on the site, typically the 404 page is small
(<a class="reference external" href="http://example.com/some404page">http://example.com/some404page</a>)</p>
<div class="highlight-java"><div class="highlight"><pre><span class="c1">// Go to the correct domain</span>
<span class="n">driver</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"http://www.example.com"</span><span class="o">);</span>

<span class="c1">// Now set the cookie. This one's valid for the entire domain</span>
<span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">"key"</span><span class="o">,</span> <span class="s">"value"</span><span class="o">);</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>

<span class="c1">// And now output all the available cookies for the current URL</span>
<span class="n">Set</span><span class="o">&lt;</span><span class="n">Cookie</span><span class="o">&gt;</span> <span class="n">allCookies</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">getCookies</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="n">Cookie</span> <span class="n">loadedCookie</span> <span class="o">:</span> <span class="n">allCookies</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%s -&gt; %s"</span><span class="o">,</span> <span class="n">loadedCookie</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">loadedCookie</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
<span class="o">}</span>

<span class="c1">// You can delete cookies in 3 ways</span>
<span class="c1">// By name</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">deleteCookieNamed</span><span class="o">(</span><span class="s">"CookieName"</span><span class="o">);</span>
<span class="c1">// By Cookie</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">deleteCookie</span><span class="o">(</span><span class="n">loadedCookie</span><span class="o">);</span>
<span class="c1">// Or all of them</span>
<span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">deleteAllCookies</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="c"># Go to the correct domain</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">"http://www.example.com"</span><span class="p">)</span>

<span class="c"># Now set the cookie. Here's one for the entire domain</span>
<span class="c"># the cookie name here is 'key' and it's value is 'value'</span>
<span class="n">driver</span><span class="o">.</span><span class="n">add_cookie</span><span class="p">({</span><span class="s">'name'</span><span class="p">:</span><span class="s">'key'</span><span class="p">,</span> <span class="s">'value'</span><span class="p">:</span><span class="s">'value'</span><span class="p">,</span> <span class="s">'path'</span><span class="p">:</span><span class="s">'/'</span><span class="p">})</span>
<span class="c"># additional keys that can be passed in are:</span>
<span class="c"># 'domain' -&gt; String,</span>
<span class="c"># 'secure' -&gt; Boolean,</span>
<span class="c"># 'expiry' -&gt; Milliseconds since the Epoch it should expire.</span>

<span class="c"># And now output all the available cookies for the current URL</span>
<span class="k">for</span> <span class="n">cookie</span> <span class="ow">in</span> <span class="n">driver</span><span class="o">.</span><span class="n">get_cookies</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">"</span><span class="si">%s</span><span class="s"> -&gt; </span><span class="si">%s</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">cookie</span><span class="p">[</span><span class="s">'name'</span><span class="p">],</span> <span class="n">cookie</span><span class="p">[</span><span class="s">'value'</span><span class="p">])</span>

<span class="c"># You can delete cookies in 2 ways</span>
<span class="c"># By name</span>
<span class="n">driver</span><span class="o">.</span><span class="n">delete_cookie</span><span class="p">(</span><span class="s">"CookieName"</span><span class="p">)</span>
<span class="c"># Or all of them</span>
<span class="n">driver</span><span class="o">.</span><span class="n">delete_all_cookies</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="c1"># Go to the correct domain</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span> <span class="s2">"http://www.example.com"</span>

<span class="c1"># Now set the cookie. Here's one for the entire domain</span>
<span class="c1"># the cookie name here is 'key' and it's value is 'value'</span>
<span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">add_cookie</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">'key'</span><span class="p">,</span> <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="s1">'value'</span><span class="p">)</span>
<span class="c1"># additional keys that can be passed in are:</span>
<span class="c1"># :path =&gt; String, :secure -&gt; Boolean, :expires -&gt; Time, DateTime, or seconds since epoch</span>

<span class="c1"># And now output all the available cookies for the current URL</span>
<span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">all_cookies</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">cookie</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">"&amp;#35;{cookie[:name]} =&gt; &amp;#35;{cookie[:value]}"</span>
<span class="p">}</span>

<span class="c1"># You can delete cookies in 2 ways</span>
<span class="c1"># By name</span>
<span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">delete_cookie</span><span class="p">(</span><span class="s2">"CookieName"</span><span class="p">)</span>
<span class="c1"># Or all of them</span>
<span class="n">driver</span><span class="o">.</span><span class="n">manage</span><span class="o">.</span><span class="n">delete_all_cookies</span>
</pre></div>
</div>
</div>
<div class="section" id="changing-the-user-agent">
<h3>Changing the User Agent<a class="headerlink" href="#changing-the-user-agent" title="Permalink to this headline">¶</a></h3>
<p>This is easy with the <a class="reference internal" href="#firefox-driver">Firefox Driver</a>:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">();</span>
<span class="n">profile</span><span class="o">.</span><span class="na">addAdditionalPreference</span><span class="o">(</span><span class="s">"general.useragent.override"</span><span class="o">,</span> <span class="s">"some UA string"</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">profile</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Firefox</span><span class="p">:</span><span class="ss">:Profile</span><span class="o">.</span><span class="n">new</span>
<span class="n">profile</span><span class="o">[</span><span class="s1">'general.useragent.override'</span><span class="o">]</span> <span class="o">=</span> <span class="s2">"some UA string"</span>
<span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span><span class="p">,</span> <span class="ss">:profile</span> <span class="o">=&gt;</span> <span class="n">profile</span>
</pre></div>
</div>
</div>
<div class="section" id="drag-and-drop">
<h3>Drag And Drop<a class="headerlink" href="#drag-and-drop" title="Permalink to this headline">¶</a></h3>
<p>Here’s an example of using the Actions class to perform a drag and drop.
Native events are required to be enabled.</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"source"</span><span class="o">));</span>
<span class="n">WebElement</span> <span class="n">target</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="s">"target"</span><span class="o">));</span>

<span class="o">(</span><span class="k">new</span> <span class="n">Actions</span><span class="o">(</span><span class="n">driver</span><span class="o">)).</span><span class="na">dragAndDrop</span><span class="o">(</span><span class="n">element</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">perform</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">'source'</span><span class="p">)</span>
<span class="n">target</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">'target'</span><span class="p">)</span>

<span class="n">driver</span><span class="o">.</span><span class="n">action</span><span class="o">.</span><span class="n">drag_and_drop</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span><span class="o">.</span><span class="n">perform</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">selenium.webdriver.common.action_chains</span> <span class="kn">import</span> <span class="n">ActionChains</span>
<span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">"source"</span><span class="p">)</span>
<span class="n">target</span> <span class="o">=</span>  <span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">"target"</span><span class="p">)</span>

<span class="n">ActionChains</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span><span class="o">.</span><span class="n">drag_and_drop</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="driver-specifics-and-tradeoffs">
<h2>Driver Specifics and Tradeoffs<a class="headerlink" href="#driver-specifics-and-tradeoffs" title="Permalink to this headline">¶</a></h2>
</div>
<div class="section" id="selenium-webdriver-s-drivers">
<h2>Selenium-WebDriver’s Drivers<a class="headerlink" href="#selenium-webdriver-s-drivers" title="Permalink to this headline">¶</a></h2>
<p>WebDriver is the name of the key interface against which tests should be
written, but there are several implementations. These include:</p>
<div class="section" id="htmlunit-driver">
<h3>HtmlUnit Driver<a class="headerlink" href="#htmlunit-driver" title="Permalink to this headline">¶</a></h3>
<p>This is currently the fastest and most lightweight implementation of WebDriver.
As the name suggests, this is based on HtmlUnit. HtmlUnit is a java based implementation
of a WebBrowser without a GUI. For any language binding (other than java) the
Selenium Server is required to use this driver.</p>
<div class="section" id="usage">
<h4>Usage<a class="headerlink" href="#usage" title="Permalink to this headline">¶</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HtmlUnitDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RemoteWebDriver</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">"http://127.0.0.1:4444/wd/hub"</span><span class="p">),</span>
                                        <span class="n">DesiredCapabilities</span><span class="p">.</span><span class="n">HtmlUnit</span><span class="p">());</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Remote</span><span class="p">(</span><span class="s">"http://localhost:4444/wd/hub"</span><span class="p">,</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">DesiredCapabilities</span><span class="o">.</span><span class="n">HTMLUNIT</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:remote</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">"http://localhost:4444/wd/hub"</span><span class="p">,</span> <span class="ss">:desired_capabilities</span> <span class="o">=&gt;</span> <span class="ss">:htmlunit</span>
</pre></div>
</div>
</div>
<div class="section" id="pros">
<h4>Pros<a class="headerlink" href="#pros" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Fastest implementation of WebDriver</li>
<li>A pure Java solution and so it is platform independent.</li>
<li>Supports JavaScript</li>
</ul>
</div>
<div class="section" id="cons">
<h4>Cons<a class="headerlink" href="#cons" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Emulates other browsers’ JavaScript behaviour (see below)</li>
</ul>
</div>
<div class="section" id="javascript-in-the-htmlunit-driver">
<h4>JavaScript in the HtmlUnit Driver<a class="headerlink" href="#javascript-in-the-htmlunit-driver" title="Permalink to this headline">¶</a></h4>
<p>None of the popular browsers uses the JavaScript engine used by HtmlUnit
(Rhino). If you test JavaScript using HtmlUnit the results may differ
significantly from those browsers.</p>
<p>When we say “JavaScript” we actually mean “JavaScript and the DOM”. Although
the DOM is defined by the W3C each browser has its own quirks and differences
in their implementation of the DOM and in how JavaScript interacts with it.
HtmlUnit has an impressively complete implementation of the DOM and has good
support for using JavaScript, but it is no different from any other
browser: it has its own quirks and differences from both the W3C standard and
the DOM implementations of the major browsers, despite its ability to mimic
other browsers.</p>
<p>With WebDriver, we had to make a choice; do we enable HtmlUnit’s JavaScript
capabilities and run the risk of teams running into problems that only manifest
themselves there, or do we leave JavaScript disabled, knowing that there are
more and more sites that rely on JavaScript? We took the conservative approach,
and by default have disabled support when we use HtmlUnit. With each release of
both WebDriver and HtmlUnit, we reassess this decision: we hope to enable
JavaScript by default on the HtmlUnit at some point.</p>
</div>
<div class="section" id="enabling-javascript">
<h4>Enabling JavaScript<a class="headerlink" href="#enabling-javascript" title="Permalink to this headline">¶</a></h4>
<p>If you can’t wait, enabling JavaScript support is very easy:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">HtmlUnitDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HtmlUnitDriver</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RemoteWebDriver</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">"http://127.0.0.1:4444/wd/hub"</span><span class="p">),</span>
                       <span class="n">DesiredCapabilities</span><span class="p">.</span><span class="n">HtmlUnitWithJavaScript</span><span class="p">());</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">caps</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Remote</span><span class="p">:</span><span class="ss">:Capabilities</span><span class="o">.</span><span class="n">htmlunit</span><span class="p">(</span><span class="ss">:javascript_enabled</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
<span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:remote</span><span class="p">,</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">"http://localhost:4444/wd/hub"</span><span class="p">,</span> <span class="ss">:desired_capabilities</span> <span class="o">=&gt;</span> <span class="n">caps</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Remote</span><span class="p">(</span><span class="s">"http://localhost:4444/wd/hub"</span><span class="p">,</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">DesiredCapabilities</span><span class="o">.</span><span class="n">HTMLUNITWITHJS</span><span class="p">)</span>
</pre></div>
</div>
<p>This will cause the HtmlUnit Driver to emulate Firefox 3.6’s JavaScript
handling by default.</p>
</div>
</div>
<div class="section" id="firefox-driver">
<h3>Firefox Driver<a class="headerlink" href="#firefox-driver" title="Permalink to this headline">¶</a></h3>
<p>Controls the <a class="reference external" href="http://getfirefox.com">Firefox</a> browser using a Firefox plugin.
The Firefox Profile that is used is stripped down from what is installed on the
machine to only include the Selenium WebDriver.xpi (plugin). A few settings are
also changed by default (<a class="reference external" href="http://code.google.com/p/selenium/source/browse/trunk/java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java#55">see the source to see which ones</a>)
Firefox Driver is capable of being run and is tested on Windows, Mac, Linux.
Currently on versions 3.6, 10, latest - 1, latest</p>
<div class="section" id="id1">
<h4>Usage<a class="headerlink" href="#id1" title="Permalink to this headline">¶</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="p">();</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Firefox</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span>
</pre></div>
</div>
</div>
<div class="section" id="id2">
<h4>Pros<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Runs in a real browser and supports JavaScript</li>
<li>Faster than the <a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a></li>
</ul>
</div>
<div class="section" id="id3">
<h4>Cons<a class="headerlink" href="#id3" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Slower than the <a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></li>
</ul>
</div>
<div class="section" id="modifying-the-firefox-profile">
<h4>Modifying the Firefox Profile<a class="headerlink" href="#modifying-the-firefox-profile" title="Permalink to this headline">¶</a></h4>
<p>Suppose that you wanted to modify the user agent string (as above), but you’ve
got a tricked out Firefox profile that contains dozens of useful extensions.
There are two ways to obtain this profile. Assuming that the profile has been
created using Firefox’s profile manager (<tt class="docutils literal"><span class="pre">firefox</span> <span class="pre">-ProfileManager</span></tt>):</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">ProfilesIni</span> <span class="n">allProfiles</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProfilesIni</span><span class="o">();</span>
<span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="n">allProfiles</span><span class="o">.</span><span class="na">getProfile</span><span class="o">(</span><span class="s">"WebDriver"</span><span class="o">);</span>
<span class="n">profile</span><span class="o">.</span><span class="na">setPreferences</span><span class="o">(</span><span class="s">"foo.bar"</span><span class="o">,</span> <span class="mi">23</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
<p>Alternatively, if the profile isn’t already registered with Firefox:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">File</span> <span class="n">profileDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">"path/to/top/level/of/profile"</span><span class="o">);</span>
<span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">(</span><span class="n">profileDir</span><span class="o">);</span>
<span class="n">profile</span><span class="o">.</span><span class="na">addAdditionalPreferences</span><span class="o">(</span><span class="n">extraPrefs</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
<p>As we develop features in the <a class="reference internal" href="#firefox-driver">Firefox Driver</a>, we expose the ability to use them.
For example, until we feel native events are stable on Firefox for Linux, they
are disabled by default. To enable them:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">FirefoxProfile</span> <span class="n">profile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxProfile</span><span class="o">();</span>
<span class="n">profile</span><span class="o">.</span><span class="na">setEnableNativeEvents</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">(</span><span class="n">profile</span><span class="o">);</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">profile</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">FirefoxProfile</span><span class="p">()</span>
<span class="n">profile</span><span class="o">.</span><span class="n">native_events_enabled</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Firefox</span><span class="p">(</span><span class="n">profile</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">profile</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">::</span><span class="ss">Firefox</span><span class="p">:</span><span class="ss">:Profile</span><span class="o">.</span><span class="n">new</span>
<span class="n">profile</span><span class="o">.</span><span class="n">native_events</span> <span class="o">=</span> <span class="kp">true</span>
<span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:firefox</span><span class="p">,</span> <span class="ss">:profile</span> <span class="o">=&gt;</span> <span class="n">profile</span>
</pre></div>
</div>
</div>
<div class="section" id="info">
<h4>Info<a class="headerlink" href="#info" title="Permalink to this headline">¶</a></h4>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/FirefoxDriver">Firefox section in the wiki page</a> for the most up to date info.</p>
</div>
</div>
<div class="section" id="internet-explorer-driver">
<h3>Internet Explorer Driver<a class="headerlink" href="#internet-explorer-driver" title="Permalink to this headline">¶</a></h3>
<p>This driver is controlled by a .dll and is thus only available on Windows OS.
Each Selenium release has it’s core functionality tested against versions
6, 7 and 8 on XP, and 9 on Windows7.</p>
<div class="section" id="id4">
<h4>Usage<a class="headerlink" href="#id4" title="Permalink to this headline">¶</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InternetExplorerDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">InternetExlorerDriver</span><span class="p">();</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Ie</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:ie</span>
</pre></div>
</div>
</div>
<div class="section" id="id5">
<h4>Pros<a class="headerlink" href="#id5" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Runs in a real browser and supports JavaScript with all the quirks
your end users see.</li>
</ul>
</div>
<div class="section" id="id6">
<h4>Cons<a class="headerlink" href="#id6" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Obviously the <a class="reference internal" href="#internet-explorer-driver">Internet Explorer Driver</a> will only work on Windows!</li>
<li>Comparatively slow (though still pretty snappy :)</li>
<li>XPath is not natively supported in most versions. Sizzle is injected automatically
which is significantly slower than other browsers and slower when comparing to CSS
selectors in the same browser.</li>
<li>CSS is not natively supported in versions 6 and 7. Sizzle is injected instead.</li>
<li>CSS selectors in IE 8 and 9 are native, but those browsers don’t fully support CSS3</li>
</ul>
</div>
<div class="section" id="id7">
<h4>Info<a class="headerlink" href="#id7" title="Permalink to this headline">¶</a></h4>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/InternetExplorerDriver">Internet Explorer section of the wiki page</a> for the most up to date info.
Please take special note of the Required Configuration section.</p>
</div>
</div>
<div class="section" id="chrome-driver">
<h3>Chrome Driver<a class="headerlink" href="#chrome-driver" title="Permalink to this headline">¶</a></h3>
<p>Chrome Driver is maintained / supported by the <a class="reference external" href="http://code.google.com/p/chromium/">Chromium</a>
project iteslf. WebDriver works with Chrome through the chromedriver binary (found on the chromium
project’s download page). You need to have both chromedriver and a version of chrome browser installed.
chromedriver needs to be placed somewhere on your system’s path in order for WebDriver to automatically
discover it. The Chrome browser itself is discovered by chromedriver in the default installation path.
These both can be overridden by environment variables. Please refer to <a class="reference external" href="http://code.google.com/p/selenium/wiki/ChromeDriver">the wiki</a>
for more information.</p>
<div class="section" id="id8">
<h4>Usage<a class="headerlink" href="#id8" title="Permalink to this headline">¶</a></h4>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChromeDriver</span><span class="o">();</span>
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="n">IWebDriver</span> <span class="n">driver</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ChromeDriver</span><span class="p">();</span>
</pre></div>
</div>
<div class="highlight-python" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
</pre></div>
</div>
<div class="highlight-ruby" style="display: none;"><div class="highlight"><pre><span class="n">driver</span> <span class="o">=</span> <span class="ss">Selenium</span><span class="p">:</span><span class="ss">:WebDriver</span><span class="o">.</span><span class="n">for</span> <span class="ss">:chrome</span>
</pre></div>
</div>
</div>
<div class="section" id="id9">
<h4>Pros<a class="headerlink" href="#id9" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Runs in a real browser and supports JavaScript</li>
<li>Because Chrome is a Webkit-based browser, the <a class="reference internal" href="#chrome-driver">Chrome Driver</a> may allow you to
verify that your site works in Safari. Note that since Chrome uses its own V8
JavaScript engine rather than Safari’s Nitro engine, JavaScript execution may
differ.</li>
</ul>
</div>
<div class="section" id="id10">
<h4>Cons<a class="headerlink" href="#id10" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Slower than the <a class="reference internal" href="#htmlunit-driver">HtmlUnit Driver</a></li>
</ul>
</div>
<div class="section" id="id11">
<h4>Info<a class="headerlink" href="#id11" title="Permalink to this headline">¶</a></h4>
<p><a class="reference external" href="http://code.google.com/p/selenium/wiki/ChromeDriver">See our wiki</a> for the most up to date info.
More info can also be found on the <a class="reference external" href="/download/">downloads page</a></p>
</div>
<div class="section" id="getting-running-with-chrome-driver">
<h4>Getting running with Chrome Driver<a class="headerlink" href="#getting-running-with-chrome-driver" title="Permalink to this headline">¶</a></h4>
<p>Download the <a class="reference external" href="http://code.google.com/p/chromium/downloads/list">Chrome Driver executable</a>
and follow the other instructions on the
<a class="reference external" href="http://code.google.com/p/selenium/wiki/ChromeDriver">wiki page</a></p>
</div>
</div>
<div class="section" id="opera-driver">
<span id="seleniumrcemulation"></span><h3>Opera Driver<a class="headerlink" href="#opera-driver" title="Permalink to this headline">¶</a></h3>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/OperaDriver">Opera Driver wiki article</a> in the
Selenium Wiki for information on using the Opera Driver.</p>
</div>
<div class="section" id="iphone-driver">
<h3>iPhone Driver<a class="headerlink" href="#iphone-driver" title="Permalink to this headline">¶</a></h3>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/IPhoneDriver">iPhone Driver wiki article</a> in the
Selenium Wiki for information on using the Mac iOS Driver.</p>
</div>
<div class="section" id="android-driver">
<h3>Android Driver<a class="headerlink" href="#android-driver" title="Permalink to this headline">¶</a></h3>
<p>See the <a class="reference external" href="http://code.google.com/p/selenium/wiki/AndroidDriver">Android Driver wiki article</a>
in the Selenium Wiki for information on using the Android Driver.</p>
</div>
</div>
<div class="section" id="alternative-back-ends-mixing-webdriver-and-rc-technologies">
<h2>Alternative Back-Ends: Mixing WebDriver and RC Technologies<a class="headerlink" href="#alternative-back-ends-mixing-webdriver-and-rc-technologies" title="Permalink to this headline">¶</a></h2>
<div class="section" id="webdriver-backed-selenium-rc">
<h3>WebDriver-Backed Selenium-RC<a class="headerlink" href="#webdriver-backed-selenium-rc" title="Permalink to this headline">¶</a></h3>
<p>The Java version of WebDriver provides an implementation of the Selenium-RC API.  These means that
you can use the underlying WebDriver technology using the Selenium-RC API.  This is primarily
provided for backwards compatibility.  It allows those who have existing test suites using the
Selenium-RC API to use WebDriver under the covers.  It’s provided to help ease the migration path
to Selenium-WebDriver.  Also, this allows one to use both APIs, side-by-side, in the same test code.</p>
<p>Selenium-WebDriver is used like this:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="c1">// You may use any WebDriver implementation. Firefox is used here as an example</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>

<span class="c1">// A "base url", used by selenium to resolve relative URLs</span>
 <span class="n">String</span> <span class="n">baseUrl</span> <span class="o">=</span> <span class="s">"http://www.google.com"</span><span class="o">;</span>

<span class="c1">// Create the Selenium implementation</span>
<span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverBackedSelenium</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="n">baseUrl</span><span class="o">);</span>

<span class="c1">// Perform actions with selenium</span>

<span class="n">selenium</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="s">"http://www.google.com"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">"name=q"</span><span class="o">,</span> <span class="s">"cheese"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">click</span><span class="o">(</span><span class="s">"name=btnG"</span><span class="o">);</span>

<span class="c1">// Get the underlying WebDriver implementation back. This will refer to the</span>
<span class="c1">// same WebDriver instance as the "driver" variable above.</span>
<span class="n">WebDriver</span> <span class="n">driverInstance</span> <span class="o">=</span> <span class="o">((</span><span class="n">WebDriverBackedSelenium</span><span class="o">)</span> <span class="n">selenium</span><span class="o">).</span><span class="na">getWrappedDriver</span><span class="o">();</span>

<span class="c1">//Finally, close the browser. Call stop on the WebDriverBackedSelenium instance</span>
<span class="c1">//instead of calling driver.quit(). Otherwise, the JVM will continue running after</span>
<span class="c1">//the browser has been closed.</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</pre></div>
</div>
<div class="section" id="id12">
<h4>Pros<a class="headerlink" href="#id12" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Allows for the WebDriver and Selenium APIs to live side-by-side</li>
<li>Provides a simple mechanism for a managed migration from the Selenium RC API
to WebDriver’s</li>
<li>Does not require the standalone Selenium RC server to be run</li>
</ul>
</div>
<div class="section" id="id13">
<h4>Cons<a class="headerlink" href="#id13" title="Permalink to this headline">¶</a></h4>
<ul class="simple">
<li>Does not implement every method</li>
<li>More advanced Selenium usage (using “browserbot” or other built-in JavaScript
methods from Selenium Core) may not work</li>
<li>Some methods may be slower due to underlying implementation differences</li>
</ul>
</div>
</div>
<div class="section" id="backing-webdriver-with-selenium">
<h3>Backing WebDriver with Selenium<a class="headerlink" href="#backing-webdriver-with-selenium" title="Permalink to this headline">¶</a></h3>
<p>WebDriver doesn’t support as many browsers as Selenium RC does, so in order to
provide that support while still using the WebDriver API, you can make use of
the <tt class="docutils literal"><span class="pre">SeleneseCommandExecutor</span></tt></p>
<p>Safari is supported in this way with the following code (be sure to disable
pop-up blocking):</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">DesiredCapabilities</span> <span class="n">capabilities</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DesiredCapabilities</span><span class="o">();</span>
<span class="n">capabilities</span><span class="o">.</span><span class="na">setBrowserName</span><span class="o">(</span><span class="s">"safari"</span><span class="o">);</span>
<span class="n">CommandExecutor</span> <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SeleneseCommandExecutor</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">"http://localhost:4444/"</span><span class="o">),</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">"http://www.google.com/"</span><span class="o">),</span> <span class="n">capabilities</span><span class="o">);</span>
<span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RemoteWebDriver</span><span class="o">(</span><span class="n">executor</span><span class="o">,</span> <span class="n">capabilities</span><span class="o">);</span>
</pre></div>
</div>
<p>There are currently some major limitations with this approach, notably that
findElements doesn’t work as expected. Also, because we’re using Selenium Core
for the heavy lifting of driving the browser, you are limited by the JavaScript
sandbox.</p>
</div>
</div>
<div class="section" id="running-standalone-selenium-server-for-use-with-remotedrivers">
<h2>Running Standalone Selenium Server for use with RemoteDrivers<a class="headerlink" href="#running-standalone-selenium-server-for-use-with-remotedrivers" title="Permalink to this headline">¶</a></h2>
<p>From <a class="reference external" href="https://code.google.com/p/selenium/downloads/list">Selenium’s Download page</a> download selenium-server-standalone-&lt;version&gt;.jar and optionally IEDriverServer. If you plan to work with Chrome, download it from <a class="reference external" href="http://chromedriver.googlecode.com/">Google Code</a>.</p>
<p>Unpack IEDriverServer and/or chromedriver and put them in a directory which is on the $PATH / %PATH% - the Selenium Server should then be able to handle requests for IE / Chrome without additional modifications.</p>
<p>Start the server on the command line with</p>
<div class="highlight-bash"><div class="highlight"><pre>java -jar &lt;path_to&gt;/selenium-server-standalone-&lt;version&gt;.jar
</pre></div>
</div>
<p>If you want to use native events functionality, indicate this on the command line with the option</p>
<div class="highlight-bash"><div class="highlight"><pre>-Dwebdriver.enable.native.events<span class="o">=</span>1
</pre></div>
</div>
<p>For other command line options, execute</p>
<div class="highlight-bash"><div class="highlight"><pre>java -jar &lt;path_to&gt;/selenium-server-standalone-&lt;version&gt;.jar -help
</pre></div>
</div>
<p>In order to function properly, the following ports should be allowed incoming TCP connections: 4444, 7054-5 (or twice as many ports as the number of concurrent instances you plan to run). Under Windows, you may need to unblock the applications as well.</p>
</div>
<div class="section" id="additional-resources">
<span id="seleniumwebdriverwiki"></span><h2>Additional Resources<a class="headerlink" href="#additional-resources" title="Permalink to this headline">¶</a></h2>
<p>You can find further resources for WebDriver
in <a class="reference external" href="http://code.google.com/p/selenium/wiki/FurtherResources">WebDriver’s wiki</a></p>
<p>Of course, don’t hesitate to do an internet search on any Selenium topic, including
Selenium-WebDriver’s drivers.  There are quite a few blogs on Selenium along with numerous posts
on various user forums.  Additionally the Selenium User’s Group is a great resource.
<a class="reference external" href="http://groups.google.com/group/selenium-users">http://groups.google.com/group/selenium-users</a></p>
</div>
<div class="section" id="next-steps">
<h2>Next Steps<a class="headerlink" href="#next-steps" title="Permalink to this headline">¶</a></h2>
<p>This chapter has simply been a high level walkthrough of WebDriver and some of its key
capabilities.  Once getting familiar with the Selenium-WebDriver API you will then want to learn
how to build test suites for maintainability, extensibility, and reduced fragility when features of
the AUT frequently change.  The approach most Selenium experts are now recommending is to design
your test code using the Page Object Design Pattern along with possibly a Page Factory.
Selenium-WebDriver provides support for this by supplying a PageFactory class in Java and C#.
This is presented,along with other advanced topics, in the
<a class="reference internal" href="04_webdriver_advanced.jsp#chapter04-reference"><em>next chapter</em></a>.  Also, for high-level description of this
technique, you may want to look at the
<a class="reference internal" href="06_test_design_considerations.jsp#chapter06-reference"><em>Test Design Considerations chapter</em></a>.  Both of these
chapters present techniques for writing more maintainable tests by making your test code more
modular.</p>